과제카테고리,학생명,튜터명,질문번호,질문제목,학생답안,점수,피드백,채점시간
Python기초,test,곽승예,PYTHON_1,숫자 리스트의 평균 계산하기,"numbers = [10, 20, 30, 40, 50]
def calculate_stock(numbers):
    total_avg = sum(numbers) / len(numbers)
    return total_avg

calculate_stock(numbers)",85,함수 외부에서 numbers 리스트를 정의하는 것은 지양해야 합니다. calculate_stock(numbers) 호출은 불필요합니다. 함수 정의만으로 충분합니다.,2025-06-13 16:49:11
Python기초,test,곽승예,PYTHON_2,간단한 사칙연산 계산기 함수 만들기,"def simple_calculator(num1, num2, operator):
    if operator == '+':
        return num1 + num2
    elif operator == '-':
        return num1 - num2
    elif operator == '*':
        return num1 * num2
    elif operator == '/':
        if num2 == 0:
            return 'Cannot divide by zero'
        else:
            return num1 / num2
    else:
        return 'Invalid operator'",100,"학생 답안은 모범 답안과 완전히 동일하며, 모든 평가 기준을 충족합니다. 코드의 정확성, 가독성, 효율성 모두 완벽합니다. 훌륭합니다!",2025-06-13 16:49:13
Python기초,test,곽승예,PYTHON_3,가장 많은 제품 찾기,"sales_data = {""apple"": 50, ""orange"": 2, ""banana"" : 30}
def find_top_seller(data):
  top_product = """"
  max_sales = -1

  for product, sales in data.items():
    if sales > max_sales:
      max_sales = sales
      top_product = product
  return top_product, max_sales
find_top_seller(sales_data)",90,"모범 답안과 동일한 로직을 구현했으며, 문제에서 요구하는 모든 조건을 충족합니다. 다만, 함수 외부에서 데이터를 정의하는 대신 함수 내부에서 정의하거나, 함수 호출 시 인자로 전달하는 것이 더 좋은 설계입니다. 이렇게 하면 함수의 독립성이 높아지고 재사용성이 향상됩니다. 또한, 학생 답안은 실행 가능한 코드 형태로 제출되어 테스트 용이성을 높였습니다.",2025-06-13 16:49:15
Python기초,test,곽승예,PYTHON_4,중복 문자 제거 및 빈도수 계산,"input_string = ""abracadabra123321""
def remove_duplicates_and_count(s):
    frequency = {}  # 각 문자의 빈도수를 저장할 딕셔너리

    for char in input_string:
      # 각 문자의 빈도수 업데이트
      if char in frequency.keys():
          frequency[char] += 1
      else:
          frequency[char] = 1

    return list(frequency.items())
remove_duplicates_and_count(input_string)",85,"`input_string`을 함수 외부에서 정의하고 사용하는 것은 함수의 독립성을 해치므로, 함수 내부에서 매개변수 `s`를 사용하여 문제를 해결해야 합니다. `frequency.keys()` 대신 `char in frequency`를 사용하여 코드를 간결하게 만들 수 있습니다. 함수 호출 부분은 채점 시에는 제외해야 합니다.",2025-06-13 16:49:18
Python기초,test,곽승예,PYTHON_5,이동 거리 구하기,"player_positions = {
    ""John Doe"": [(0, 0), (1, 1), (2, 2), (5, 5)],
    ""Jane Smith"": [(2, 2), (3, 8), (6, 8)],
    ""Mike Brown"": [(0, 0), (3, 4), (6, 8)]
}

def calculate_total_distances(player_positions):
    records = []
    for player, positions in player_positions.items():
            total_distance = 0.0
            for i in range(0, len(positions)-1):
                x1, y1 = positions[i]
                x2, y2 = positions[i+1]
                distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
                total_distance += distance
            records.append((player,round(total_distance,2)))
    return records
calculate_total_distances(player_positions)",None,"**

전반적으로 매우 잘 작성된 코드입니다. 유클리드 거리 계산, 누적 거리 계산, 결과 반환 형식 등 모든 요구사항을 정확하게 구현했습니다. 가독성 측면에서 약간의 개선 (여백 추가, 주석 추가)을 통해 코드를 더욱 이해하기 쉽게 만들 수 있습니다. 또한, 현재 코드는 player_positions가 비어있거나, positions의 길이가 1인 경우에 대한 예외 처리가 되어있지 않습니다. 이러한 예외 상황을 고려하여 코드를 보완하면 더욱 견고한 코드가 될 것입니다. 다만, 문제에서 별도의 예외 처리를 요구하지 않았으므로 감점하지 않았습니다. 효율성 측면에서는 더 이상 개선할 부분이 없을 정도로 잘 작성되었습니다.",2025-06-13 16:49:21
