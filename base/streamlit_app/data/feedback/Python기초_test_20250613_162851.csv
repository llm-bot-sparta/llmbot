과제카테고리,학생명,튜터명,질문번호,질문제목,학생답안,점수,피드백,채점시간
Python기초,test,곽승예,PYTHON_1,숫자 리스트의 평균 계산하기,"numbers = [10, 20, 30, 40, 50]
def calculate_stock(numbers):
    total_avg = sum(numbers) / len(numbers)
    return total_avg

calculate_stock(numbers)",85,"*   함수 외부에서 `numbers` 리스트를 정의하고 함수 내에서 다시 사용하는 것은 좋은 습관이 아닙니다. 함수는 독립적으로 작동하도록 설계하는 것이 좋습니다. 즉, `numbers` 리스트를 함수 호출 시 인자로 전달하는 것이 더 바람직합니다.
*   코드의 전반적인 구조는 훌륭합니다. 함수 정의, 변수 사용, 반환 값 등 기본적인 요소들을 잘 갖추고 있습니다.
*   PEP 8 스타일 가이드라인을 준수하면 코드의 일관성과 가독성을 더욱 향상시킬 수 있습니다.",2025-06-13 16:28:41
Python기초,test,곽승예,PYTHON_2,간단한 사칙연산 계산기 함수 만들기,"def simple_calculator(num1, num2, operator):
    if operator == '+':
        return num1 + num2
    elif operator == '-':
        return num1 - num2
    elif operator == '*':
        return num1 * num2
    elif operator == '/':
        if num2 == 0:
            return 'Cannot divide by zero'
        else:
            return num1 / num2
    else:
        return 'Invalid operator'
print(simple_calculator(10, 5, '+'))  # 출력: 15
print(simple_calculator(10, 5, '-'))  # 출력: 5
print(simple_calculator(10, 5, '*'))  # 출력: 50
print(simple_calculator(10, 0, '/'))  # 출력: 'Cannot divide by zero'",100,"모범 답안과 동일하게 작성되었으며, 코드의 정확성, 가독성, 효율성 모두 완벽합니다. 추가적인 개선점은 보이지 않습니다. 훌륭합니다! 학생 답안에 포함된 `print` 함수들은 문제 풀이 자체와는 관련 없으므로 채점에는 영향을 미치지 않았습니다.",2025-06-13 16:28:44
Python기초,test,곽승예,PYTHON_3,가장 많은 제품 찾기,"sales_data = {""apple"": 50, ""orange"": 2, ""banana"" : 30}
def find_top_seller(data):
  top_product = """"
  max_sales = -1

  for product, sales in data.items():
    if sales > max_sales:
      max_sales = sales
      top_product = product
  return top_product, max_sales
find_top_seller(sales_data)",90,"함수 외부에서 `sales_data`를 정의하고 사용하는 것은 함수 재사용성을 떨어뜨릴 수 있습니다. `sales_data`를 함수의 인자로 받아 처리하거나, 함수 내부에 정의하는 것이 더 좋은 구조입니다.",2025-06-13 16:28:46
Python기초,test,곽승예,PYTHON_4,중복 문자 제거 및 빈도수 계산,"input_string = ""abracadabra123321""
def remove_duplicates_and_count(s):
    frequency = {}  # 각 문자의 빈도수를 저장할 딕셔너리

    for char in input_string:
      # 각 문자의 빈도수 업데이트
      if char in frequency.keys():
          frequency[char] += 1
      else:
          frequency[char] = 1

    return list(frequency.items())
remove_duplicates_and_count(input_string)",80,"1. 함수가 외부 변수 `input_string`에 의존적인 형태로 작성되어 재사용성이 떨어집니다. 함수 내부에서 직접 문자열을 정의하는 대신, 함수의 인자 `s`를 사용해야 합니다.
2. `if char in frequency.keys():` 대신 `if char in frequency:`를 사용하는 것이 더 간결하고 효율적입니다. `in` 연산자는 딕셔너리의 키를 직접 검색하기 때문에 `.keys()`를 명시적으로 호출할 필요가 없습니다.
3. 함수 호출 `remove_duplicates_and_count(input_string)`의 결과를 활용하지 않고 버려집니다. 결과를 변수에 저장하거나 출력하는 등의 처리가 필요합니다.",2025-06-13 16:28:49
Python기초,test,곽승예,PYTHON_5,이동 거리 구하기,"player_positions = {
    ""John Doe"": [(0, 0), (1, 1), (2, 2), (5, 5)],
    ""Jane Smith"": [(2, 2), (3, 8), (6, 8)],
    ""Mike Brown"": [(0, 0), (3, 4), (6, 8)]
}

def calculate_total_distances(player_positions):
    records = []
    for player, positions in player_positions.items():
            total_distance = 0.0
            for i in range(0, len(positions)-1):
                x1, y1 = positions[i]
                x2, y2 = positions[i+1]
                distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
                total_distance += distance
            records.append((player,round(total_distance,2)))
    return records
calculate_total_distances(player_positions)",100,"학생 답안은 모범 답안과 동일하며, 모든 평가 기준을 완벽하게 충족합니다. 코드가 정확하고 가독성이 뛰어나며 효율적입니다.",2025-06-13 16:28:51
