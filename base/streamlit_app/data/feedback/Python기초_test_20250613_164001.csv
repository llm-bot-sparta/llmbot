과제카테고리,학생명,튜터명,질문번호,질문제목,학생답안,점수,피드백,채점시간
Python기초,test,곽승예,PYTHON_1,숫자 리스트의 평균 계산하기,"numbers = [10, 20, 30, 40, 50]
def calculate_stock(numbers):
    total_avg = sum(numbers) / len(numbers)
    return total_avg

calculate_stock(numbers)",85,"함수 외부에서 리스트를 정의하는 것은 지양하고, 함수 내부에서 정의하거나 인자로 받는 것이 더 좋음. 변수명은 간결하고 명확하게 짓는 것이 중요함. calculate_stock(numbers)를 호출하는 부분은 채점 프로그램에서 자동으로 호출하므로 불필요함.",2025-06-13 16:39:51
Python기초,test,곽승예,PYTHON_2,간단한 사칙연산 계산기 함수 만들기,"def simple_calculator(num1, num2, operator):
    if operator == '+':
        return num1 + num2
    elif operator == '-':
        return num1 - num2
    elif operator == '*':
        return num1 * num2
    elif operator == '/':
        if num2 == 0:
            return 'Cannot divide by zero'
        else:
            return num1 / num2
    else:
        return 'Invalid operator'",100,"학생 답안은 모범 답안과 완전히 동일하며, 모든 평가 기준을 충족합니다. 코드의 정확성, 가독성, 효율성 모두 훌륭합니다.",2025-06-13 16:39:52
Python기초,test,곽승예,PYTHON_3,가장 많은 제품 찾기,"sales_data = {""apple"": 50, ""orange"": 2, ""banana"" : 30}
def find_top_seller(data):
  top_product = """"
  max_sales = -1

  for product, sales in data.items():
    if sales > max_sales:
      max_sales = sales
      top_product = product
  return top_product, max_sales
find_top_seller(sales_data)",90,모범 답안과 동일한 로직으로 정답을 구현했습니다. 함수 외부에서 sales_data를 정의한 부분을 수정하면 더욱 완벽한 코드가 될 것입니다. 함수 내부에서 sales_data를 정의하거나 함수의 인자로 받는 방식으로 개선할 수 있습니다.,2025-06-13 16:39:55
Python기초,test,곽승예,PYTHON_4,중복 문자 제거 및 빈도수 계산,"input_string = ""abracadabra123321""
def remove_duplicates_and_count(s):
    frequency = {}  # 각 문자의 빈도수를 저장할 딕셔너리

    for char in input_string:
      # 각 문자의 빈도수 업데이트
      if char in frequency.keys():
          frequency[char] += 1
      else:
          frequency[char] = 1

    return list(frequency.items())
remove_duplicates_and_count(input_string)",80,"1. 함수가 범용적으로 사용될 수 있도록 입력 문자열을 함수 인자 `s`로 받아 처리해야 합니다. 현재 코드는 특정 문자열(""abracadabra123321"")에 대해서만 동작합니다.
2. `input_string` 변수를 함수 외부에서 정의하는 것은 좋지 않습니다. 함수 내부에서 정의하거나 함수의 인자로 전달받는 것이 좋습니다.
3. 딕셔너리에서 키 존재 여부를 확인할 때 `frequency.keys()` 메서드 대신 `if char in frequency:`를 사용하는 것이 더 효율적이고 Pythonic합니다. `keys()` 메서드는 딕셔너리의 모든 키를 리스트로 반환하므로 불필요한 연산을 수행합니다.",2025-06-13 16:39:58
Python기초,test,곽승예,PYTHON_5,이동 거리 구하기,"player_positions = {
    ""John Doe"": [(0, 0), (1, 1), (2, 2), (5, 5)],
    ""Jane Smith"": [(2, 2), (3, 8), (6, 8)],
    ""Mike Brown"": [(0, 0), (3, 4), (6, 8)]
}

def calculate_total_distances(player_positions):
    records = []
    for player, positions in player_positions.items():
            total_distance = 0.0
            for i in range(0, len(positions)-1):
                x1, y1 = positions[i]
                x2, y2 = positions[i+1]
                distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
                total_distance += distance
            records.append((player,round(total_distance,2)))
    return records
calculate_total_distances(player_positions)",None,"**

학생 답안은 모범 답안과 동일하며, 모든 평가 기준을 충족합니다. 코드의 정확성, 가독성, 효율성 모두 뛰어납니다. 특히, 유클리드 거리 계산과 누적 거리 계산 로직을 정확하게 구현하고 결과를 원하는 형식으로 반환하는 점이 인상적입니다. 추가적으로 개선할 부분은 없습니다.",2025-06-13 16:40:01
