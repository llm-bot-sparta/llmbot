과제카테고리,학생명,튜터명,질문번호,질문제목,학생답안,점수,피드백,채점시간
Python기초,test,곽승예,PYTHON_1,숫자 리스트의 평균 계산하기,"numbers = [10, 20, 30, 40, 50]
def calculate_stock(numbers):
    total_avg = sum(numbers) / len(numbers)
    return total_avg

calculate_stock(numbers)",None,"**

학생 답안은 모범 답안과 거의 동일하게 평균 계산 로직을 잘 구현했습니다. `sum()`과 `len()` 내장 함수를 활용하여 코드를 간결하게 만든 점도 좋습니다.

**개선점:**

1.  **전역 변수 사용 지양:** `numbers` 리스트를 함수 외부에서 정의하는 것은 함수가 특정 데이터에 종속되게 만듭니다. 함수가 더 다양한 상황에서 활용될 수 있도록, `numbers` 리스트를 함수의 인자로 전달받도록 수정하는 것이 좋습니다 (모범 답안처럼).
2.  **함수 호출:** 학생 답안은 함수를 정의하고 바로 `calculate_stock(numbers)`를 호출하는 코드가 포함되어 있습니다. 이 코드는 문제의 요구사항에 명시적으로 포함되어 있지 않으므로, 평가 기준에 따라 감점 요인이 될 수 있습니다. 함수 정의만 남겨두거나, 아니면 함수 호출 부분을 별도의 실행 영역 (예: `if __name__ == ""__main__"":`) 안에 넣는 것이 좋습니다.",2025-06-13 16:13:45
Python기초,test,곽승예,PYTHON_2,간단한 사칙연산 계산기 함수 만들기,"def simple_calculator(num1, num2, operator):
    if operator == '+':
        return num1 + num2
    elif operator == '-':
        return num1 - num2
    elif operator == '*':
        return num1 * num2
    elif operator == '/':
        if num2 == 0:
            return 'Cannot divide by zero'
        else:
            return num1 / num2
    else:
        return 'Invalid operator'
print(simple_calculator(10, 5, '+'))  # 출력: 15
print(simple_calculator(10, 5, '-'))  # 출력: 5
print(simple_calculator(10, 5, '*'))  # 출력: 50
print(simple_calculator(10, 0, '/'))  # 출력: 'Cannot divide by zero'",100,"학생 답안은 모범 답안과 완전히 동일하며, 모든 평가 기준에서 만점을 받았습니다. 코드가 정확하고 가독성이 뛰어나며 효율적입니다. 추가적인 개선점은 없습니다.",2025-06-13 16:13:47
Python기초,test,곽승예,PYTHON_3,가장 많은 제품 찾기,"sales_data = {""apple"": 50, ""orange"": 2, ""banana"" : 30}
def find_top_seller(data):
  top_product = """"
  max_sales = -1

  for product, sales in data.items():
    if sales > max_sales:
      max_sales = sales
      top_product = product
  return top_product, max_sales
find_top_seller(sales_data)",90,"함수 외부에서 `sales_data`를 정의하는 대신, 함수 내부에 정의하거나 함수의 인자로 전달하는 것이 더 좋은 설계입니다. 함수를 호출하는 부분은 채점 대상이 아니므로 감점하지 않았습니다.",2025-06-13 16:13:49
Python기초,test,곽승예,PYTHON_4,중복 문자 제거 및 빈도수 계산,"input_string = ""abracadabra123321""
def remove_duplicates_and_count(s):
    frequency = {}  # 각 문자의 빈도수를 저장할 딕셔너리

    for char in input_string:
      # 각 문자의 빈도수 업데이트
      if char in frequency.keys():
          frequency[char] += 1
      else:
          frequency[char] = 1

    return list(frequency.items())
remove_duplicates_and_count(input_string)",75,"1. 함수가 외부 변수에 의존하지 않도록 수정해야 합니다. 함수는 입력 인자 `s`에 대해서만 동작해야 합니다.
2. `frequency.keys()`를 사용하는 것보다 `in frequency`를 사용하는 것이 더 Pythonic하고 효율적입니다.
3. 함수 호출 부분 `remove_duplicates_and_count(input_string)`은 불필요합니다. 함수 정의만으로 충분합니다. 이 부분을 제거하면 코드의 의도가 더 명확해집니다.",2025-06-13 16:13:52
Python기초,test,곽승예,PYTHON_5,이동 거리 구하기,"player_positions = {
    ""John Doe"": [(0, 0), (1, 1), (2, 2), (5, 5)],
    ""Jane Smith"": [(2, 2), (3, 8), (6, 8)],
    ""Mike Brown"": [(0, 0), (3, 4), (6, 8)]
}

def calculate_total_distances(player_positions):
    records = []
    for player, positions in player_positions.items():
            total_distance = 0.0
            for i in range(0, len(positions)-1):
                x1, y1 = positions[i]
                x2, y2 = positions[i+1]
                distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
                total_distance += distance
            records.append((player,round(total_distance,2)))
    return records
calculate_total_distances(player_positions)",None,"**
전반적으로 훌륭한 코드입니다. 정확성, 효율성 면에서 높은 점수를 받을 만합니다. 가독성 측면에서 player_positions 변수 정의 위치와 변수명 스타일을 조금만 개선하면 더욱 완벽해질 것 같습니다. 고생하셨습니다.",2025-06-13 16:13:55
