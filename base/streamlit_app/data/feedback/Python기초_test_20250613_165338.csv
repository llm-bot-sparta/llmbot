과제카테고리,학생명,튜터명,질문번호,질문제목,학생답안,점수,피드백,채점시간
Python기초,test,곽승예,PYTHON_1,숫자 리스트의 평균 계산하기,"numbers = [10, 20, 30, 40, 50]
def calculate_stock(numbers):
    total_avg = sum(numbers) / len(numbers)
    return total_avg

calculate_stock(numbers)",85,"함수 외부에서 numbers 리스트를 정의하는 것은 지양하고, 함수 내에서 정의하거나 인자로 전달하는 것이 좋습니다. 또한, calculate_stock(numbers)를 호출하는 부분이 함수 외부에 존재하는데, 이 부분은 필요에 따라 삭제하거나 다른 로직에 포함시켜야 합니다.",2025-06-13 16:53:27
Python기초,test,곽승예,PYTHON_2,간단한 사칙연산 계산기 함수 만들기,"def simple_calculator(num1, num2, operator):
    if operator == '+':
        return num1 + num2
    elif operator == '-':
        return num1 - num2
    elif operator == '*':
        return num1 * num2
    elif operator == '/':
        if num2 == 0:
            return 'Cannot divide by zero'
        else:
            return num1 / num2
    else:
        return 'Invalid operator'",100,"학생의 답안은 모범 답안과 완전히 동일하며, 제시된 모든 평가 기준을 충족합니다. 코드의 정확성, 가독성, 효율성 모두 뛰어납니다. 개선할 부분은 없습니다.",2025-06-13 16:53:29
Python기초,test,곽승예,PYTHON_3,가장 많은 제품 찾기,"sales_data = {""apple"": 50, ""orange"": 2, ""banana"" : 30}
def find_top_seller(data):
  top_product = """"
  max_sales = -1

  for product, sales in data.items():
    if sales > max_sales:
      max_sales = sales
      top_product = product
  return top_product, max_sales
find_top_seller(sales_data)",100,"학생 답안은 모범 답안과 동일한 기능을 수행하며, 코드 스타일도 우수합니다. 불필요한 코드 없이 문제 해결에 필요한 핵심 로직만을 포함하고 있어 효율성 측면에서도 뛰어납니다. 다만, 함수의 외부에서 `sales_data` 변수를 정의하고 함수를 호출하는 방식은 코드의 재사용성을 약간 떨어뜨릴 수 있습니다. 함수 내부에 테스트 케이스를 포함하거나, 함수 호출 부분을 독립된 실행 블록으로 분리하는 것을 고려해볼 수 있습니다.",2025-06-13 16:53:31
Python기초,test,곽승예,PYTHON_4,중복 문자 제거 및 빈도수 계산,"input_string = ""abracadabra123321""
def remove_duplicates_and_count(s):
    frequency = {}  # 각 문자의 빈도수를 저장할 딕셔너리

    for char in input_string:
      # 각 문자의 빈도수 업데이트
      if char in frequency.keys():
          frequency[char] += 1
      else:
          frequency[char] = 1

    return list(frequency.items())
remove_duplicates_and_count(input_string)",75,"1. 함수 외부에서 `input_string`을 정의하고 사용하는 것은 함수의 독립성을 해칩니다. 함수는 입력 `s`를 사용하여 문자열을 처리해야 합니다. `remove_duplicates_and_count(""your_string"")`과 같이 호출 가능해야 합니다.
2. `if char in frequency.keys():` 대신 `if char in frequency:`를 사용하는 것이 더 간결하고 효율적입니다. 딕셔너리에서 key를 검색할 때 `.keys()`를 명시적으로 호출할 필요가 없습니다.
3. `remove_duplicates_and_count(input_string)`을 호출하는 부분은 함수 정의 외부에 있어야 하며, 테스트를 위한 코드임을 명확히 해야 합니다. 그리고 이 부분은 채점 대상이 아니므로, 제출 시에는 제외하는 것이 좋습니다.",2025-06-13 16:53:36
Python기초,test,곽승예,PYTHON_5,이동 거리 구하기,"player_positions = {
    ""John Doe"": [(0, 0), (1, 1), (2, 2), (5, 5)],
    ""Jane Smith"": [(2, 2), (3, 8), (6, 8)],
    ""Mike Brown"": [(0, 0), (3, 4), (6, 8)]
}

def calculate_total_distances(player_positions):
    records = []
    for player, positions in player_positions.items():
            total_distance = 0.0
            for i in range(0, len(positions)-1):
                x1, y1 = positions[i]
                x2, y2 = positions[i+1]
                distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
                total_distance += distance
            records.append((player,round(total_distance,2)))
    return records
calculate_total_distances(player_positions)",100,"모범 답안과 동일하며, 모든 평가 기준을 충족합니다. 코드의 정확성, 가독성, 효율성 모두 뛰어납니다.",2025-06-13 16:53:38
